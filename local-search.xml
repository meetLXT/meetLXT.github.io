<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Morgan英文面试准备</title>
    <link href="/2022/04/01/Morgan%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2022/04/01/Morgan%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然Morgan面试这事儿已经翻篇啦，把之前自己为英文面试做准备的草稿整理一下传上来。有的是英文句子，有的是英文关键词，有的是中文，有的是博客链接。提前说明：1）由于本人比较菜，之前也没正儿八经准备过408/八股这类，所以可能有些很简单的问题或者很差劲很一般的回答。2）本博客没有做教程的目的，主要是为了记录。如果能给他人起一点参考则更好。3）所有的题目主要是针对网络搜集的摩根的面经而作的准备，很可能对面试其他外企没有帮助。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><h4 id="Concept："><a href="#Concept：" class="headerlink" title="Concept："></a>Concept：</h4><p>an attack method, utilize programmers’ negligence to achieve to login without account, or even temper the DB</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select * from user_table where username=<br>&#x27; &quot;<span class="hljs-operator">+</span>userName<span class="hljs-operator">+</span>&quot; &#x27; and password=&#x27; &quot;<span class="hljs-operator">+</span>password<span class="hljs-operator">+</span>&quot; &#x27;&quot;;<br><br><span class="hljs-comment">--当输入了上面的用户名和密码，上面的SQL语句变成：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> user_table <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><br><span class="hljs-string">&#x27;’or 1 = 1 -- and password=&#x27;</span>’<br><br>&quot;&quot;&quot;<br>--分析SQL语句：<br>--条件后面username=”or 1=1 用户名等于 ” 或1=1 那么这个条件一定会成功；<br><br>--然后后面加两个-，这意味着注释，它将后面的语句注释，让他们不起作用，这样语句永远都--能正确执行，用户轻易骗过系统，获取合法身份。<br>--这还是比较温柔的，如果是执行<br>SELECT * FROM user_table WHERE<br>username=&#x27;&#x27; ;DROP DATABASE (DB Name) --&#x27; and password=&#x27;&#x27;<br>--其后果可想而知…<br></code></pre></td></tr></table></figure><h4 id="How-to-avoid"><a href="#How-to-avoid" class="headerlink" title="How to avoid"></a>How to avoid</h4><ul><li><p>variable should has the fixed type + check whether match the types and formats of  variable</p></li><li><p>filter special symbols</p></li><li>binding variables, using pre-compiled statements</li></ul><h3 id="SQL-JOIN"><a href="#SQL-JOIN" class="headerlink" title="SQL JOIN"></a>SQL JOIN</h3><ul><li><p>Inner Join: Returns all rows when there isat least one match in both tables</p></li><li><p>Left Join: Return all rows from the left table, and the matched rows from the right table</p></li><li>Right Join: Return all rows from the right table,and the matched rows from the left table</li><li>Full Join: Return all rows when there is amatch in one of the tables</li></ul><h3 id="ACID-of-database"><a href="#ACID-of-database" class="headerlink" title="ACID of database"></a>ACID of database</h3><ul><li>Atomic (if the change is committed, ithappens in onefell swoop; you can never see “half a change”)</li><li>Consistent (the change can only happen ifthe new stateof the system will be valid; any attempt to commit an invalidchange will fail,leaving the system in its previous valid state)</li><li>Isolated (no-one else sees any part of thetransaction until it’s committed)</li><li>Durable (once the change has happened - ifthe systemsays the transaction has been committed, the client doesn’t need toworry about”flushing” the system to make the change”stick”)</li></ul><h3 id="Transaction-Concurrency-Problems"><a href="#Transaction-Concurrency-Problems" class="headerlink" title="Transaction Concurrency Problems"></a>Transaction Concurrency Problems</h3><ul><li><p>concept of transaction: A transaction is a unit of work that you want to treat as “a whole”. It has to either happen in full, or not at all.</p></li><li><p>problems</p><ul><li><p>miss modification:更新操作被另外一个事务的更新操作替换</p></li><li><p>dirty read：在不同的事务下，当前事务T2可以读到另外事务T1未提交的数据。（T1 rollback）</p></li><li><p>unrepeatable read：在一个事务内多次读取同一数据，未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。</p></li><li><p>phantom read幻读：读取范围过程中插入新范围</p></li></ul></li><li><p>Solution</p><ul><li><p>adding lock(但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。)</p><ul><li>exclusive lock</li><li>shared lock</li><li>intention lock</li></ul></li><li><p>isolation level:</p><ul><li>read uncommitted (MVCC)</li><li>read committed (MVCC)</li><li>repeatable read</li><li>serializable (implement by adding lock)</li></ul></li></ul></li></ul><h3 id="数据库存储过程"><a href="#数据库存储过程" class="headerlink" title="数据库存储过程"></a>数据库存储过程</h3><p>存储过程是一些预编译的SQL语句。更加直白的理解：存储过程可以说是一个记录集，它是由一些下-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。</p><ul><li>存储过程是一个预编译的代码块，执行效率比较高</li><li>一个存储过程替代大量T_SQL语句，可以降低网络通信量，提高通信速率</li><li>可以一定程度上确保数据安全</li></ul><h3 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h3><p>关系型数据库通过外键关联来建立表与表之间的关系，非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</p><p>关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织</p><ul><li>优点：<ul><li>易于维护：都是使用表结构，格式一致；</li><li>方便：SQL语言通用，可用于复杂查询；</li><li>复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</li></ul></li><li>缺点：<ul><li>读写性能比较差，尤其是海量数据的高效率读写；</li><li>固定的表结构，灵活度稍欠；</li><li>高并发读写需求，传统关系型数据库来说，硬盘1/0是一个很大的瓶颈。</li></ul></li></ul><p>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或者键值对等。</p><ul><li>优点：<ul><li>格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</li><li>速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；</li><li>高扩展性；</li><li>成本低：nosql数据库部署简单，基本都是开源软件。</li></ul></li><li>缺点：<ul><li>不提供sql支持，学习和使用成本较高；</li><li>无事务处理；</li><li>数据结构相对复杂，复杂查询方面稍欠。</li></ul></li></ul><p>非关系型数据库的分类和比较：</p><ul><li>文档型</li><li>key-value型</li><li>列式数据库</li><li>图形数据库</li></ul><h4 id="Clustered-Index-and-Unclustered-Index"><a href="#Clustered-Index-and-Unclustered-Index" class="headerlink" title="Clustered Index and Unclustered Index"></a>Clustered Index and Unclustered Index</h4><p>聚簇索引的顺序就是数据的物理存储顺序，而对非聚簇索引的索引顺序与数据物理排列顺序无关。</p><p><a href="https://www.jianshu.com/p/fa8192853184">参考链接</a></p><h2 id="操作系统相关"><a href="#操作系统相关" class="headerlink" title="操作系统相关"></a>操作系统相关</h2><h3 id="Thread-and-process"><a href="#Thread-and-process" class="headerlink" title="Thread and process"></a>Thread and process</h3><ul><li><p>features</p><ul><li><p>Thread: run in shared memory space; easier tocreate and terminate; lightweight; possess fewer resources; faster task-switching; data sharing with otherthread; care synchronization overhead of shared data;</p></li><li><p>Process: separate memory space; heavyweight; possess more resources; independent of each other; consist of mutipule thread</p></li></ul></li><li><p>Communication Method</p><p>​    <a href="https://blog.csdn.net/liyue98/article/details/80112246">参考链接</a></p></li></ul><h3 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h3><p><a href="https://github.com/Qiu-Ye/InterviewFAQ-Linux#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">参考链接</a></p><h2 id="Java相关"><a href="#Java相关" class="headerlink" title="Java相关"></a>Java相关</h2><h3 id="Difference-between-Java-and-C"><a href="#Difference-between-Java-and-C" class="headerlink" title="Difference between Java and C++"></a>Difference between Java and C++</h3><h4 id="Five-words-to-conclude"><a href="#Five-words-to-conclude" class="headerlink" title="Five words to conclude"></a>Five words to conclude</h4><ul><li>C++: object-oriented,  Platform or Machine Independent/ Portable, Compiler-Based, Speed, DMA (Dynamic Memory Allocation)</li><li>Java: object-oriented, interpreter-based, Robust, Platform Independent/ Portable, Multithreaded, high performance, distributed,</li></ul><h4 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h4><p>Although Java and C++ are both object-oriented languages that support encapsulation, inheritance, and polymorphism, there are a number of differences between them. Java does not provide pointers for direct memory access, which makes program memory safer Java classes are mono-inherited, C++ supports multiple inheritance; although Java classes cannot be multi-inherited, interfaces can be multi-inherited. Java has an automatic memory management garbage collection mechanism (GC), which does not require the programmer to release useless memory manually. C ++ supports both method overloading and operator overloading, but Java only supports method overloading (operator overloading adds complexity, which is inconsistent with Java’s original design philosophy).</p><h3 id="Override-and-overload"><a href="#Override-and-overload" class="headerlink" title="Override and overload"></a>Override and overload</h3><ul><li>overload: polymophism, different methods in a class (which have different type and number of parameters)</li><li>override: subclass inherit parent class and make some difference; and if use the original method in parent class —&gt; use Super</li></ul><p><img src="/2022/04/01/Morgan%E8%8B%B1%E6%96%87%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/image-20220401214234878.png" alt="override &amp; overload"></p><h3 id="线程安全的数据结构-函数："><a href="#线程安全的数据结构-函数：" class="headerlink" title="线程安全的数据结构/函数："></a>线程安全的数据结构/函数：</h3><p>HashTable，ConcurrentHashMap，CopyOnWriteArrayList，CopyOnWriteArraySet，ConcurrentLinkedQueue，Vector，StringBuffer</p><h3 id="Objective-oriented-Programming"><a href="#Objective-oriented-Programming" class="headerlink" title="Objective-oriented Programming"></a>Objective-oriented Programming</h3><p>It is to model and abstract the problem solving methods into objects. Then giving properties and methods to these objects and letting the objects perform these operations.</p><h4 id="features"><a href="#features" class="headerlink" title="features"></a>features</h4><ul><li><p>Polymorphism:  Polymorphism is the ability (in programming)to present the same interface for differing underlying forms (data types). Polymorphism is when you can treat an object as a generic version of something, but when you access it, the code determines which exact type it is and calls the associated code</p></li><li><p>Encapsulation: Data and data-based operations are encapsulated using abstract data types so that they form an indivisible, independent entity. The data is protected inside the abstract data type, hiding the internal details as much as possible and keeping only some external interfaces to connect it to the outside. The user does not need to care about the internal details of the object, but can access the object through the interfaces provided by the object to the outside.</p></li><li><p>inheritance: allow us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p></li></ul><h4 id="advantages"><a href="#advantages" class="headerlink" title="advantages"></a>advantages</h4><p>Easy to maintain, expand, euse, can design a low-coupling system, easy to expand, reuse.</p><h4 id="网上2022摩根面经中的2个题目"><a href="#网上2022摩根面经中的2个题目" class="headerlink" title="网上2022摩根面经中的2个题目"></a>网上2022摩根面经中的2个题目</h4><ul><li><p>how to desian a system like taobao</p><ul><li>first: MVC(Model View Controller) design a web —&gt; develop front-end (i.e. html5 css3 javascript jquery  vue) + back-end(including database) (some framwork, like Springboot)<ul><li>database can be uploaded to cloud servers</li></ul></li><li>consider high-concurrency:<ul><li>divide service, a database for a service</li><li>cache , can use Redis, 高并发场景，大多<strong>读多写少</strong>，可以在数据库和缓存里都写一份，然后读时大量走缓存。</li><li>mq for 异步 Synchronous</li><li>主从架构读写分离，主库写，从库读</li><li>Elasticsearch ，for scalability</li></ul></li></ul></li><li><p>设计一个搜索引擎类，去调用已有的各种搜索引擎（比如google、bing等等），对于用户来说输入一些关键词就能得到搜索结果</p><ul><li>爬取creep：怎么爬取？广度爬取？深度爬取？算法如何打算最优？</li><li>索引index：索引爬取的数据，得去做去重分析，建立相关数据库，数据库的量也是庞大的</li><li>收录：怎么确定收录页面的排名？得涉及到相关的排名算法，是以页面内容为导向？外部链接为导向？等等</li></ul></li></ul><h3 id="Stack-overflow"><a href="#Stack-overflow" class="headerlink" title="Stack overflow"></a>Stack overflow</h3><ul><li><p>whether there is a recursive call</p></li><li><p>whether there is a large number of cycles or dead cycles</p></li><li><p>whether there are too many global variables</p></li><li>Whether the array, List, map data is too large</li><li>Use DDMS tool to find the location of stack overflow</li></ul><h3 id="Memory-Leak-Leakage"><a href="#Memory-Leak-Leakage" class="headerlink" title="Memory Leak/Leakage"></a>Memory Leak/Leakage</h3><p>Virtual memory is allocated but not reclaimed when it is no longer needed.</p><p>An OutofMemoryError is thrown, but the occurrence of OutofMemoryError does not represent a certain memory leak. It may be caused by improper configuration parameters of the JVM. However, if an exception is thrown after a long time, the risk of a memory leak is very high.</p><p><a href="https://blog.csdn.net/weixin_44798288/article/details/119641944?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">JAVA的内存泄漏(Memory Leak)&amp;内存溢出(Out Of Memory)</a></p><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3>]]></content>
    
    
    
    <tags>
      
      <tag>实习准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex入门</title>
    <link href="/2022/03/31/latex%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/31/latex%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先开个坑，为我的朋友写一个latex入门，本地tex配置网上教程很多，就先不赘述了。我个人很喜欢用overleaf，方便协作，也可以避免一些配置不当导致的出错，所以也写一下overleaf的一些入门。计划这两天把这篇blog结束。</p><span id="more"></span>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Morgan Stanley Technology Summer Analyst Intern复盘</title>
    <link href="/2022/03/15/Morgan-Stanley-Technology-Summer-Analyst-Intern%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/03/15/Morgan-Stanley-Technology-Summer-Analyst-Intern%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为一些机缘巧合，这几天以一个没有准备好的情况下被赶鸭子上架进行了一次Morgan Stanley（大摩）的笔面经历，简单复盘下，总结一下流程和记录下自己的一些感悟。</p><p>时间跨度：3.11—&gt;3.15—&gt;3.22(3.31)</p><p>流程总体还是很快的，每次都会发邮件给反馈。</p><span id="more"></span><h1 id="Whole-process"><a href="#Whole-process" class="headerlink" title="Whole process"></a>Whole process</h1><p>可能因为这个是提前批次，所以流程有所简化，轮次相对较少，大概是code test -&gt; phone interview -&gt; online interview -&gt; offer。注意：interview都是全英文，30分钟左右。</p><p>0307 参加宣讲会。有一说一摩根是真的有钱，妇女节来临之际，给每个来宣讲会的女生送了伴手礼（一束花+一个欧舒丹护手霜），且每张桌子上放了帆布包或文具袋；</p><p>0308通过邮箱收到含code test链接、账户及密码的邮件，要求0312中午前完成（code test内容下面会详细说明）；</p><p>0311 完成code test，结果是2道AC。</p><p>0313 收到通知进入下一轮电面（phone interview）的邮件，邮件内说明会在电面前邮件通知你时间；</p><p>0314 下午1点收到邮件，约0315 10:00-10:30时间电面，非常人性化地征求了意见；</p><p>0315 约定的时间进行了电面。</p><h1 id="Code-Test"><a href="#Code-Test" class="headerlink" title="Code Test"></a>Code Test</h1><p>笔试平台为hackerrank，要求40min完成2道题，不限语言，难度大概是中等题，但是想要规定时间内都AC具有一定的难度。不过让我比较意外的是这次所有人的code test题目甚至都是一样的，原本以为是不打算笔试刷人的意思，但是后来得知只有都AC的才能进入下一轮……</p><p>这次的题目为：</p><blockquote><p>题目一：给定target字符串，要让与target字符转等长的全零字符串翻转成target，求解最小翻转次数，其中翻转规则如下：</p><p>将给定位置以其右边的数字全部取反</p><p>target: 0100</p><p>全零字符串: 0000</p><p>第一次从3的位置翻转：0011</p><p>第二次从1的位置翻转：0100</p><p>至少需要两次</p><p>从最左边开始搜索，找到有几次变化，答案就是几</p><p>题目二：</p><p>给定两个字符串数组，例如A：[“tea”, “boy”, “aaa”]，B：[“aet”, “aoy”, “aa”]，要将A中的每一个字符串转化为B中，如果可以就是转换次数，例”tea”变成“aet”只需要0次，”boy”变成”aoy”,需要1次， “aaa”变成”aa”不能则是-1，答案是[0,1,-1]</p></blockquote><h1 id="0315-Phone-Interview"><a href="#0315-Phone-Interview" class="headerlink" title="0315-Phone Interview"></a>0315-Phone Interview</h1><h2 id="电面过程"><a href="#电面过程" class="headerlink" title="电面过程"></a>电面过程</h2><p>电面前一天晚上，我在网上搜索了一下面经，发现摩根问的问题有一些相似的情况，甚至可以形成一个题库。（也很合理，毕竟面试你的人技术基础和英语很难兼得）。我主要参考的是这个博客整理的题库：</p><p><a href="https://blog.csdn.net/zhangzhuoyang/article/details/72823197">Morgan题库</a></p><p>并结合其他面经，我整理了一套自己的题库，大约35个问题Q&amp;A，形成了一个word文档，等过两天我也会整理了上传。</p><p>非常准时10点拨来，原本以为会是直接上来就说英文，发现对面的interviewer先是中文开场，然后问是否可以开始面试。然后英文介绍了一下主要面试流程，他先自己进行了brief self- introduction。然后让我进行3 min self- introduction。我主要说了一些自己的项目经历科研成果，但是他告诉我他今天不会详细问我自己的研究内容，主要是一些standard questions。</p><p>首先问了我Why you choose Morgan?</p><p>我就先夸了夸摩根，然后从一些soft skills的角度说了下原因， 并说自己上周听了宣讲会，宣讲会中提到的比如kind mentor, the balanced gender ratio and the work-life balance之类的很吸引我（表现自己有认真听宣讲会）。然后就宣讲会他也问了我一个问题。</p><p>接着是一些关于技术的问题，主要是以下内容：</p><ul><li>Stack overflow</li><li>hash table &amp; hash map</li><li>memory leak/leakage 和cpp 和java在这方面分别如何预防该问题</li><li>Garbage collection 和cpp 和java在这方面的区别</li><li>transaction 和一些深入的问题（我因为没太听懂他的意思，就猜测一个问题的答案为deadlock，但是看他的反应应该不是，于是他根据deadlock深入问我下面的问题。|| 后来意识到应该是答案是脏读不可重复读幻读等，但是当时确实没听清楚）</li><li>deadlock是什么&amp;怎么预防</li><li>Sql injection</li></ul><p>其中大部分在我原本准备的范围内，但是会深入问，如果对该内容了解不够就会回答不上来。有的内容因为我了解并不够，所以我也不敢直接照着说答案，怕被质疑觉得作弊的可能性。所以还是需要well prepared才行。</p><p>技术面差不多结束，是一个soft question：describe a time you make a tough decision</p><p>但由于我对外企的套路不够熟悉，且没准备过这个问题，我当时有点懵。一时想不起来有什么可以分享的自己做过什么艰难的决定……所以说的有点磕磕绊绊。</p><p>最后是让我反问，我原本是问了英文，但是interviewer说可以直接中文问他（大概是他也不想英文回答吧）。通过反问了解到：1）面试官并不确定你何时可以接到是否能进入下一轮的通知，要看hr。2）外企很看重技术基础。3）Morgan不同部门不同组情况不同，不过整体上不算stressed。</p><h2 id="电面复盘"><a href="#电面复盘" class="headerlink" title="电面复盘"></a>电面复盘</h2><p>其实于我而言结果并不重要，我只是希望可以增加一次人生经历，某种程度上我甚至很害怕进入下一轮。但是今天的电面复盘让我有一些反思。</p><ul><li>外企相比国内互联网大厂，可能对你本身的项目情况并不看重，也不会问很多很难的八股文，<strong>更看重的是你对计算机基础技术的掌握情况（</strong>也就是本保研er没准备过的408内容）。<strong>外企也很看重算法</strong>，可能没有国内互联网大厂的难度高，但是从只有都AC了才给过也能看出对算法的要求。此外，对英语能力比较看重。Morgan这次的面试总体还是比较温柔的风格，不会过分为难你，点到即止。可能外企的风格都是这样吧，不像国内互联网大厂喜欢搞压力面。原本我觉得30分钟全英文面很难，但是后来发现其实很多时间会被你浪费在思考问题、思考如何表达和一些无意义“嗯啊呃”以及“I beg you pardon”中。30分钟很快就过去了。所以如果有朋友真的想去外企，还是尽可能让口语更加流利一些。（不过即便是中文面试，也是<strong>尽量避免这些无意义的水词</strong>比较好）</li><li>因为害怕被质疑作弊，本着希望对方认为自己诚信的原则，所以有的自己其实准备了但不懂的问题并没有展开去说，事后是后悔的，因为如果说了的话对方至少会觉得你是好好准备了的，如果深入的部分不会到时候再说自己不知道。毕竟按照现在的情况，很多人其实都有一套作弊机制，那如果你想要表现的不作弊和坦诚，很可能就比不过别人……（这就是那种不良性的内卷吧……）</li><li><strong>心态真的很重要</strong>，本科的时候由于答辩经验丰富，我完全不害怕面试。（当然也有保研面试中，一般规律是如果有项目和科研情况会只问这些而不问基础专业知识，所以我当时只需要准备好我的项目内容即可的原因。）但是近两年很少经历答辩和面试，又是针对我自己准备不够充分且不够擅长的领域，所以即便我并不看重此次面试的结果，但是不可避免地我还是非常紧张，前一天晚上睡眠质量很差。之后有机会还是可以多尝试面试答辩等场合，磨练心态，尤其在自己非常想要争取的事情上，一定要提前多磨练自己！</li><li>最后的感受就是<strong>机会永远给有准备的人</strong>，比如针对此次Morgan的经历，不论是宣讲会当天如果携带简历会skip一些流程（我当时猜到会这样，但是我因为意愿不高所以并没有做这个准备），还是多看面经/平时把408基础夯实/准备好八股文，不论是怎样的面试都不会太慌。换到其他方面也一样。</li></ul><h1 id="0331-Final-Interview"><a href="#0331-Final-Interview" class="headerlink" title="0331-Final Interview"></a>0331-Final Interview</h1><p>由于疫情原因，终面现在只能线上进行，往年需要亲自去Morgan进行Assessment Center Interview（简称AC面）。</p><h2 id="一些曲折"><a href="#一些曲折" class="headerlink" title="一些曲折"></a>一些曲折</h2><p>3月17日晚收到进入final interview的邮件，然而不知道为什么被归入了垃圾邮件，导致我没有能及时收到。3月18日下午Morgan开始给我打电话，大概2小时内打了4个未接来电，然后经过提醒我才意识到我错过了这个邮件，并赶紧回复了邮件。邮件通知我final interview的时间为3月22日13:20-16:30，大概流程为下图所示。</p><p><img src="/2022/03/15/Morgan-Stanley-Technology-Summer-Analyst-Intern%E5%A4%8D%E7%9B%98/image-20220331165710097.png" alt="schedule of final interview"></p><p>当发现要3个小时3轮全英文面试的时候我是有些懵的，这是从来没有经历过的，坦白讲畏难情绪先占了上风。然而后来3月19日晚得到了学校因存在核酸检测异常要施行“7+7”防控措施，紧急封闭楼宇并进行网格化管理，而我的宿舍网络环境实在不佳，无法保证3h的稳定连接，并且我本人由于担任学生干部，做了我所在楼层的层长，事发紧急，第一天手忙脚乱，琐碎的事情较多，22日大概率也需要做核酸，考虑到以上问题，我选择在20日给Morgan发了邮件（越早发的话hr更方便安排），阐述了目前面临的情况，期望可以申请延期进行面试，如若不行则选择放弃这次机会。令人感动的是，hr第二天回复我“No worries, please be safe. We can invite you in next batch if you cannot attend tomorrow’s session.”当时非常感动于Morgan的人性化。</p><p>于是在3月23日收到邮件通知3月31日8:50-11:50进行面试。</p><h2 id="终面过程"><a href="#终面过程" class="headerlink" title="终面过程"></a>终面过程</h2><p>round2-4是全程开摄像头+共享屏幕。每轮会换面试官。</p><p> 由于没有开录音，细节记得不是很清楚，可能有遗漏，但是和我之前在牛客上看到的面经分享相差很大，round3让我措手不及。下面详细谈谈。面试前我也准备了一些内容，之后有机会一起整理上传吧。下面是详细的过程：</p><p>8:50-9:00：hr介绍今天的流程和一些注意点。</p><p>9:00-9:30：code test，2道算法题，平台依然是hackerrank，会议里会给同一场的candidate测试平台的代码。坦白说难度不算高，但是如果想30分钟都AC太短。不过开头时面试官说了是最后结束时再submit，之前不用submit，面试结束的时候再submit（本人亲身体验会自动submit）。</p><ul><li>Question 1: 调整数组顺序使奇数位于偶数前面，与leetcode 21很像（也有区别）。开始的时候用的双指针，但只能通过4/12个测试用例，百思不得其解问题在哪，后来在round2的break环节换了方法和数据类型才AC。</li><li>Question 2：使数组元素相等的最小移动次数，与leetcode 453基本一样，主要是数据类型为long long</li></ul><p>9:30-10:15：round 2 </p><p>  是一个女面试官，首先她自我介绍，然后让我讲刚刚的算法思路。我表达了对第1题的困惑，她问我如果给我多5min，我会如何debug。接着让我进行3min self- introduction，而后根据我的简历问了些问题。</p><ul><li>惯用语言（我说了java和C++），我也顺便谈了谈我现在正在参与做的项目</li><li>在团队中如何决定具体使用的语言</li><li>我的项目使用的http还是https，区别</li><li>我的项目使用的什么数据库，使用过什么数据库</li><li>对Redis的理解，和早年的一个项目为什么使用Redis</li><li>如何防止transaction concurrency problems</li><li>Java和C++的区别</li><li>由于我谈到了两个语言在platform上的区别，看看我平时使用的platform</li><li>由于我谈到了java的garbage collection，让我谈谈GC</li><li>关于Java APIs使用的一些问题，然后也衍生到了我的一篇论文提问</li><li>可能因为看到我是mac电脑，问我linux的问题，linux如何查询内存消耗和线程进程情况</li><li>用Java编程时如何检查内存消耗情况</li><li>有没有接触过multi-thread编程，理解+举例</li><li>针对我的举例，问我当时为什么使用multi-thread而不使用multi-process</li><li>因为我的项目比较科研，我自己也提到了之前打算过读phd，不过现在放弃了，然后问了我soft question，做出这个选择的原因是什么</li><li>反问环节，我问了她1）我的question1的code，她经验较丰富，如果是她如何5min内debug，她回答的也比较笼统，大概也是针对test case找问题；2）对我有什么advice，她一方面是说可能需要再improve English，还有就是针对我个人经历她提出了点人生规划建议（？），她觉得做决定要主要depend on personal willings，这样才会竭尽全力。并且和我分享了Morgan对女性而言比较好的点。</li></ul><p>总的来说，我挺喜欢round2的面试官，面试过程总体比较顺畅。</p><p>10:30-11:15：round 3</p><p>这一轮简直是我的噩梦，是我会半夜三点会因为想到“elevator”而惊醒开始尴尬抠脚的程度。这一轮进来了2个面试官，1男1女，女士还是我的校友学姐（15届），上来先说的中文，让我还挺意外，她俩自我介绍完开始英文，先让我进行了1min self- introduction。</p><p>我原本以为是问八股一点的问题，或者谈算法的设计思路，结果直接让我打开编译器设计elevator，我完全没预料到这一环节会出现这个词，一时没反应过来在说什么，还以为是java的某个发音相似的关键字。结果面试官给我解释了一下，是设计电梯……开始以为是关于电梯调度算法/策略，结果回答不是，就是真的设计一个elevator类……可能是考设计模式吧，但是我完全没预想到会考这个，我预想了考什么“如何设计一个taobao一样的系统”，如何“设计一个搜索引擎”，等等。然后我就写卡壳了，很尴尬地问能不能换题。然后让我设计一个VendingMachine。我说一般写这种的话应该设计数据库，然后用JDBC连接数据库。面试官说现在不用，就正常设计类，具体的数据你可以随便安排一下。在大二上学期刚学java的时候写过类似的内容后，再也没写过了。因为对不熟悉的内容怀有生涩感和畏惧感，越写越慌，很不自信，也忘了加@override，变量名的命名逻辑也有点糟糕，后来几次被提醒让我写某个关键函数之类的，提醒我时间不多了之类的……总之感觉这轮我的表现很不行。我最后就在那说“平时主要都在写leetcode之类的code test，很久没涉及过OOD，感谢这次经历让我明白要加强OOD，Thx for your time, I’m sorry for wasting your time”之类的……TAT</p><p>11:30-12:15：round 4</p><p>  这轮面试官是一个感觉和我年龄相差不大的小姐姐，首先让我3min self-introduction，然后问了我一些soft questions。</p><ul><li>我所说的这些论文等工作，遇到过什么challenging的问题，如何解决的</li><li><p>Why choose Morgan</p></li><li><p>是否遇到过需要make decisions against your values 的confliction，因为我没有特别明白这个问题，她还拿自己的故事作了说明。</p></li><li>一个类似上一个的问题，make difficult decision时候，不同option会有什么risk和potential results</li></ul><p>​    最后是让共享屏幕编程，计算string中word出现的frequency，区分大小写，无数字。然后讲思路，写test case。</p><h2 id="终面复盘"><a href="#终面复盘" class="headerlink" title="终面复盘"></a>终面复盘</h2><ul><li>如果平时写代码都是leetcode这类或者套模板啥的会忽略头文件和main函数，更是没准备过设计模式设计类等OOD相关的类型。如果要准备互联网求职，还是要好好准备这方面，代码能力很重要；</li><li>如果要去外企的话，口语和英文都要再加强，有些词一时会想不起来或者想不起来怎么读；</li><li>408问题还是得准备，尤其关于linux、计算机网络和数据库；</li><li>总的来说，不论结果，是一次难得的经历（3h全英文是真的累），外企的面试不会过分为难你，可以守护好我的玻璃心。然而难过的事情会被忘记，开心的事情会被忘记，但是尴尬的事情不会TAT</li><li>我要好好克服我该死的拖延症，最后还是拖到临面试前一天才开始准备……</li><li>最后，感谢Hoohoo一直以来的陪伴。</li></ul><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>实习面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex进阶记录</title>
    <link href="/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也算是使用了四年latex，但一直停留于修改模板的基础上。每次需要解决问题时都是临时去网上搜相关教程，大部分都用完即忘。因此想现在开始每次记录整理自己遇到的问题，以后再遇到也方便参考。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="题外话：关于画流程图的一个小安利"><a href="#题外话：关于画流程图的一个小安利" class="headerlink" title="题外话：关于画流程图的一个小安利"></a>题外话：关于画流程图的一个小安利</h2><p><a href="https://www.processon.com/">processon</a>这个网站主要用于在线作图，推荐的理由是已经支持用latex形式输入文字。相比visio不支持latex，且对于公式、复杂符号的不友好，简单的图形可以借助processon。</p><p>不过processon也有缺点，主要表现为latex输入的字符导出后可能比普通文字模糊一些。（也可能是我不是尊贵的VIP吧）</p><h2 id="多行公式缩放"><a href="#多行公式缩放" class="headerlink" title="多行公式缩放"></a>多行公式缩放</h2><p>有时会遇到公式太长的情况，需要对公式进行缩放</p><h3 id="方法一：-resizebox"><a href="#方法一：-resizebox" class="headerlink" title="方法一：\resizebox"></a>方法一：\resizebox</h3><p>对于公式、表格等内容，我们可以使用 <code>graphicx</code> 提供的 <code>\resizebox</code> 命令来处理。</p><p>一个例子：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br><span class="hljs-keyword">\resizebox</span>&#123;.9<span class="hljs-keyword">\hsize</span>&#125;&#123;!&#125;&#123;<span class="hljs-built_in">$</span>content<span class="hljs-built_in">$</span>&#125;<span class="hljs-comment">%可以根据需要修改&quot;.9\hsize&quot;</span><br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><p>注意：填写公式的那边一定要用“$ $”内联公式的方式，不可用其他。另外，直接这样用可能会有公式的编号，如果不需要的话，要在end代码前加上“\nonumber”。</p><p>缺点：只能一行代码。若用在多行上需要反复多次，且行距太大。</p><h3 id="方法2-缩小公式左右或上下的空隙宽度"><a href="#方法2-缩小公式左右或上下的空隙宽度" class="headerlink" title="方法2: 缩小公式左右或上下的空隙宽度"></a>方法2: 缩小公式左右或上下的空隙宽度</h3><p>缩小公式左右宽度：这个适合于只超出页面一点点的情况。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;equation*&#125;<br>   <span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>1,(n<span class="hljs-built_in">_</span>1-n<span class="hljs-built_in">_</span>2+1)<span class="hljs-keyword">\cdot</span> 2<span class="hljs-built_in">^</span>1+(n<span class="hljs-built_in">_</span>2-n<span class="hljs-built_in">_</span>3+1)<span class="hljs-keyword">\cdot</span> 2<span class="hljs-built_in">^</span>0+p<span class="hljs-keyword">\cdot</span> 2<span class="hljs-built_in">^</span>0&#125;=<span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>1,2n<span class="hljs-built_in">_</span>1-n<span class="hljs-built_in">_</span>2-n<span class="hljs-built_in">_</span>3+p+3&#125;<br><span class="hljs-keyword">\end</span>&#123;equation*&#125;<br><span class="hljs-keyword">\begin</span>&#123;equation*&#125;<br>  <span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>1,(n<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\!</span>-<span class="hljs-keyword">\!</span>n<span class="hljs-built_in">_</span>2<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>1)<span class="hljs-keyword">\!</span><span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\!</span>2<span class="hljs-built_in">^</span>1<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>(n<span class="hljs-built_in">_</span>2<span class="hljs-keyword">\!</span>-<span class="hljs-keyword">\!</span>n<span class="hljs-built_in">_</span>3<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>1)<span class="hljs-keyword">\!</span><span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\!</span>2<span class="hljs-built_in">^</span>0<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>p<span class="hljs-keyword">\!</span><span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\!</span>2<span class="hljs-built_in">^</span>0&#125;    =<span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>1,2n<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\!</span>-<span class="hljs-keyword">\!</span>n<span class="hljs-built_in">_</span>2<span class="hljs-keyword">\!</span>-<span class="hljs-keyword">\!</span>n<span class="hljs-built_in">_</span>3<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>p<span class="hljs-keyword">\!</span>+<span class="hljs-keyword">\!</span>3&#125;<span class="hljs-keyword">\label</span>&#123;eq:4&#125;.<br><span class="hljs-keyword">\end</span>&#123;equation*&#125;<br></code></pre></td></tr></table></figure><p>生成的排版为：</p><p><img src="/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/image-20210524181747729.png" alt="image-20210524181747729"></p><p>注意：可以使用<code>\quad</code>，<code>\qquad</code>，<code>,</code>，<code>:</code>，<code>;</code>，<code>!</code>等符号。</p><p>前两个间隔较大，后三个较小，最后一个是负距离，也就是我们上面呈现的这样，可以用于缩小左右宽度。</p><hr><p>缩小公式上下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br><span class="hljs-keyword">\setlength</span><span class="hljs-keyword">\abovedisplayskip</span>&#123;3pt&#125;<span class="hljs-comment">%shrink space</span><br><span class="hljs-keyword">\setlength</span><span class="hljs-keyword">\belowdisplayskip</span>&#123;3pt&#125;<br><span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>3,n<span class="hljs-built_in">_</span>2,n<span class="hljs-built_in">_</span>1,p&#125;<span class="hljs-keyword">\label</span>&#123;eq:1&#125;,<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/424685-20190505164029498-565971424.jpg" alt="img"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br><span class="hljs-keyword">\Ket</span>&#123;n<span class="hljs-built_in">_</span>3,n<span class="hljs-built_in">_</span>2,n<span class="hljs-built_in">_</span>1,p&#125;<span class="hljs-keyword">\label</span>&#123;eq:1&#125;,<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/424685-20190505164053611-1722932847.jpg" alt="img"></p><p>注意：<code>\setlength\abovedisplayskip&#123;3pt&#125;</code>指令在很多时候都可以用。</p><p>IEEE的格式默认行距似乎是3pt，所以可以按自己需求设置参数。</p><h3 id="方法3-定义新环境"><a href="#方法3-定义新环境" class="headerlink" title="方法3: 定义新环境"></a>方法3: 定义新环境</h3><p>在cls或tex文件里定义新环境（注意：一定要在<code>\begin&#123;document&#125;</code>之前）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\newenvironment</span>&#123;sequation&#125;&#123;<span class="hljs-keyword">\small</span><span class="hljs-keyword">\begin</span>&#123;equation&#125;&#125;&#123;<span class="hljs-keyword">\end</span>&#123;equation&#125;&#125;<br><span class="hljs-keyword">\newenvironment</span>&#123;tequation&#125;&#123;<span class="hljs-keyword">\tiny</span><span class="hljs-keyword">\begin</span>&#123;equation&#125;&#125;&#123;<span class="hljs-keyword">\end</span>&#123;equation&#125;&#125;<br></code></pre></td></tr></table></figure><p>而后在正文就可以用这个定义的新环境。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;tequation&#125;<br>A <span class="hljs-keyword">\times</span> B = C<br><span class="hljs-keyword">\end</span>&#123;tequation&#125;<br></code></pre></td></tr></table></figure><p>注意：但是我用这个方法后，TexStudio报错，显示缺少一些字体。网上有人给出的解决方案是改变编译方式，添加或替换为“pdfLatex”。但是我这么操作后报了新的错误，有点麻烦。使用overleaf可以正常编译。</p><h3 id="方法4-最简单易操作的方法"><a href="#方法4-最简单易操作的方法" class="headerlink" title="方法4: 最简单易操作的方法"></a>方法4: 最简单易操作的方法</h3><p>在公式外加上<code>\begin&#123;small&#125;</code>和<code>\end&#123;small&#125;</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;small&#125; <br><span class="hljs-keyword">\begin</span>&#123;equation&#125; <br>content<br><span class="hljs-keyword">\end</span>&#123;equation&#125; <br><span class="hljs-keyword">\end</span>&#123;small&#125;<br></code></pre></td></tr></table></figure><p>当然，也可以用\tiny和其他字体，直接替换small即可。</p><p><img src="/2021/05/24/latex%E8%BF%9B%E9%98%B6%E8%AE%B0%E5%BD%95/image-20210524183038189.png" alt="image-20210524183038189"></p><p>如果要写多行公式，可以用<code>\begin&#123;split&#125;</code>和<code>\end&#123;split&#125;</code>，或者cases，array。</p><p>公式间用<code>\\</code>换行。若想要公式对齐则在想要对齐的地方前面加上<code>&amp;</code>。</p><h3 id="方法5-公式整体左移右移。"><a href="#方法5-公式整体左移右移。" class="headerlink" title="方法5: 公式整体左移右移。"></a>方法5: 公式整体左移右移。</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\hspace</span>&#123;-2mm&#125;<span class="hljs-comment">%&#123;&#125;里面负数为左移，正为右移</span><br></code></pre></td></tr></table></figure><p>另外，如果想要调整公式间距，公式中也可以用这个。</p><h2 id="两张图片并列排放"><a href="#两张图片并列排放" class="headerlink" title="两张图片并列排放"></a>两张图片并列排放</h2><h3 id="单栏"><a href="#单栏" class="headerlink" title="单栏"></a>单栏</h3><p>在latex中，对于双栏格式的排版，插入一栏图片时，使用的是<code>\begin&#123;figure&#125;……\end&#123;figure&#125;</code></p><p>可复制的代码如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;[!htbp]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\subfigure</span>[子图片1标题]&#123;<span class="hljs-keyword">\label</span>&#123;fig1&#125;<span class="hljs-keyword">\includegraphics</span>[width=0.48<span class="hljs-keyword">\linewidth</span>]&#123;图片位置&#125;&#125;<br><span class="hljs-keyword">\subfigure</span>[子图片2标题]&#123;<span class="hljs-keyword">\label</span>&#123;fig2&#125;<span class="hljs-keyword">\includegraphics</span>[width=0.48<span class="hljs-keyword">\linewidth</span>]&#123;图片位置&#125;&#125;<br><span class="hljs-keyword">\caption</span>&#123;整张图片的标题&#125;<br><span class="hljs-keyword">\label</span>&#123;fig3&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure><h3 id="跨双栏"><a href="#跨双栏" class="headerlink" title="跨双栏"></a>跨双栏</h3><p>插入双栏图片时需在figure的上标中加入符号“<em>”，具体为`\begin{figure</em>}……\end{figure*}`</p><p>可复制的代码如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;figure*&#125;[!htbp]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\subfigure</span>[子图片1标题]&#123;<span class="hljs-keyword">\label</span>&#123;fig1&#125;<span class="hljs-keyword">\includegraphics</span>[width=0.48<span class="hljs-keyword">\linewidth</span>]&#123;图片位置&#125;&#125;<br><span class="hljs-keyword">\subfigure</span>[子图片2标题]&#123;<span class="hljs-keyword">\label</span>&#123;fig2&#125;<span class="hljs-keyword">\includegraphics</span>[width=0.48<span class="hljs-keyword">\linewidth</span>]&#123;图片位置&#125;&#125;<br><span class="hljs-keyword">\caption</span>&#123;整张图片的标题&#125;<br><span class="hljs-keyword">\label</span>&#123;fig3&#125;<br><span class="hljs-keyword">\end</span>&#123;figure*&#125;<br></code></pre></td></tr></table></figure><h2 id="让创建表格变得更简单"><a href="#让创建表格变得更简单" class="headerlink" title="让创建表格变得更简单"></a>让创建表格变得更简单</h2><p>可以利用一个网站创建表格。网址：<a href="https://www.tablesgenerator.com/">https://www.tablesgenerator.com/</a></p><p>以前手动输入时经常会因为漏了一个&amp;符号，或调整格式而折腾半天，有了这个网站可以使创建表格的操作变得更简单舒适～</p><p>这个网站同时也支持直接上传CSV文件生成表格。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美化fulid主题</title>
    <link href="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在不改动源文件的前提下，通过修改css或js文件，美化修改fluid主题的博客！</p><p>根据我的个人审美，我主要进行修改的部分是动态彩条，鼠标、看板娘、头部打字机颜色效果渐变、滚动条颜色。</p><p>这篇文章有参考一个csdn的博客：<a href="https://blog.csdn.net/weixin_43471926/article/details/109798811">参考源</a></p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>打开fliud的config.yml文件，在里面找到custom_css和custom_js的位置，分别在两者的下面进行引入。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">/js/</span>diy/timeDate.js<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.js  <span class="hljs-comment">#/APlayer#/APlayer依赖</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/m</span>etowolf<span class="hljs-regexp">/Metingjs@1.2/</span>dist<span class="hljs-regexp">/Meting.min.js  #/</span>APlayer依赖<br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br>custom_css:<br>  - <span class="hljs-regexp">/css/</span>diy/shubiao.css <span class="hljs-comment">#鼠标指针</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.css   <span class="hljs-comment">#/APlayer依赖</span><br></code></pre></td></tr></table></figure><h2 id="js类"><a href="#js类" class="headerlink" title="js类"></a>js类</h2><h3 id="动态彩条"><a href="#动态彩条" class="headerlink" title="动态彩条"></a>动态彩条</h3><p>这个效果据说是next主题自带的。</p><p><img src="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/image-20210423225925242.png" alt="效果图"></p><p>复制在上面说到的custom_js的下面：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>caidai.js <span class="hljs-comment"># 动态彩带</span><br></code></pre></td></tr></table></figure><h3 id="静态彩条，点击改变形状"><a href="#静态彩条，点击改变形状" class="headerlink" title="静态彩条，点击改变形状"></a>静态彩条，点击改变形状</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>jingtaisidai.js <span class="hljs-comment"># 静态彩带</span><br></code></pre></td></tr></table></figure><h3 id="动态黑色线条"><a href="#动态黑色线条" class="headerlink" title="动态黑色线条"></a>动态黑色线条</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br></code></pre></td></tr></table></figure><h2 id="css类"><a href="#css类" class="headerlink" title="css类"></a>css类</h2><h3 id="头部打字机颜色效果渐变"><a href="#头部打字机颜色效果渐变" class="headerlink" title="头部打字机颜色效果渐变"></a>头部打字机颜色效果渐变</h3><p>我当初选择fluid主题的一个原因就是很喜欢这个头部打印机效果，那么现在还可以让这个头部打印机效果更好看！</p><p><img src="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/image-20210423230445369.png" alt="效果图"></p><p>在上面说的custom_css下面添加：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>toubudaziji.css <span class="hljs-comment"># 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure><p>当然，如果你不想要渐变的话：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>daziyanse.css<span class="hljs-comment"># 头部打字机颜色</span><br></code></pre></td></tr></table></figure><h3 id="滚动条颜色"><a href="#滚动条颜色" class="headerlink" title="滚动条颜色"></a>滚动条颜色</h3><p><img src="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/image-20210423230652438.png" alt="效果图"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/gu</span>ndongtiao.css<span class="hljs-comment"># 滚动条颜色</span><br></code></pre></td></tr></table></figure><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><p><img src="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/8b8d7c0c1f0793c36590dc5f12f676a8.png" alt="效果图"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/css/</span>shubiao.css<span class="hljs-comment"># 鼠标指针</span><br></code></pre></td></tr></table></figure><h2 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h2><p><img src="/2021/04/23/%E7%BE%8E%E5%8C%96fulid%E4%B8%BB%E9%A2%98/image-20210423230905281.png" alt="image-20210423230905281"></p><p>想拥有一只这样的动态小猫吗？或者像我一样很想养猫但苦于时候未到只能云养猫。（或者想要其他模型来陪伴你的博客，比如美少女。）</p><p>那么首先在hexo根目录下执行命令来安装模块。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">npm install --save hexo-<span class="hljs-keyword">helper</span>-live2d<br><span class="hljs-comment">// 没有纸飞机的小伙伴建议在前面加个c，像这样，下面的下载模型也一样我就不再说了</span><br>cnpm install --save hexo-<span class="hljs-keyword">helper</span>-live2d<br></code></pre></td></tr></table></figure><p>然后下载模型。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> &#123;packagename&#125;<br></code></pre></td></tr></table></figure><p><a href="https://huaji8.top/post/live2d-plugin-2.0/">模型预览</a></p><p>packagename 如下：</p><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01</li><li>live2d-widget-model-haru/02</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul><p>比如我的小白猫用的就是如下指令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install live<span class="hljs-number">2</span>d-widget-model-tororo<br></code></pre></td></tr></table></figure><p>下面我们进行相关配置，也是遵循<a href="https://github.com/EYHN/hexo-helper-live2d">live2d官方文档</a>里的教程。</p><p>官方文档说在fluid主题下的config.yml文件或hexo下的config.yml文件进行修改都可以，我自己操作的话是发现我这边只有在hexo下的config文件进行修改不出错。</p><p>在config.yml文件的最后加入以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># enable: false</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># Root path of plugin to be on the site (Relative)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># JavaScript path related to plugin&#x27;s root (Relative)</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># Relative model path related to plugin&#x27;s root (Relative)</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># Default</span><br>  <span class="hljs-comment"># scriptFrom: jsdelivr # jsdelivr CDN</span><br>  <span class="hljs-comment"># scriptFrom: unpkg # unpkg CDN</span><br>  <span class="hljs-comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Whether only to replace live2d tag instead of inject to all pages</span><br>  <span class="hljs-attr">log:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Whether to show logs in console</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-tororo</span> <span class="hljs-comment"># 模型名字 npm-module package name</span><br></code></pre></td></tr></table></figure><p>具体参数可以自行调整，甚至你可以diy修改模型。方法是找到模型的目录，可以直接搜索模型名 tororo ，找到里面 texture_00.png 的图片，利用PS软件或其他方式对图片文件进行修改，创造独属于你的模型。</p><p>我找到我模型的位置是在/Users/lxt/blog/node_modules/live2d-widget-model-tororo/assets/moc/tororo.2048，仅供参考。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用脚本便利生活——关于brew和hexo</title>
    <link href="/2021/04/21/%E7%94%A8%E8%84%9A%E6%9C%AC%E4%BE%BF%E5%88%A9%E7%94%9F%E6%B4%BB%E2%80%94%E2%80%94%E6%B8%85%E9%99%A4brew%E7%BC%93%E5%AD%98%E5%92%8C%E4%B8%80%E5%8F%A5%E6%8C%87%E4%BB%A4%E4%B8%8A%E4%BC%A0%E5%8D%9A%E6%96%87/"/>
    <url>/2021/04/21/%E7%94%A8%E8%84%9A%E6%9C%AC%E4%BE%BF%E5%88%A9%E7%94%9F%E6%B4%BB%E2%80%94%E2%80%94%E6%B8%85%E9%99%A4brew%E7%BC%93%E5%AD%98%E5%92%8C%E4%B8%80%E5%8F%A5%E6%8C%87%E4%BB%A4%E4%B8%8A%E4%BC%A0%E5%8D%9A%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>把我们的口号打在公屏上：用脚本便利生活！懒人就要生活越简单越好！</p><p>致谢：我的老朋友Hoohoo！</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>众所周知，Homebrew的缓存很难清理：</p><ul><li>清理软件难以把它清理干净</li><li>brew cleanup 只能清理120天前的缓存</li></ul><p>这里贴上少数派的教程，让我学会了通过脚本清理Homebrew缓存。</p><p>参考：<a href="https://sspai.com/post/65842">从零开始，编写一个 HomeBrew 缓存清理脚本 - 少数派</a></p><hr><p>再次众所周知，我们利用hexo实现本地预览和上传需要几句指令。</p><p>本地预览：<kbd>hexo clean</kbd>和<kbd>hexo s</kbd></p><p>上传：<kbd>hexo clean</kbd> 紧接着<kbd>hexo g</kbd>再然后<kbd>hexo d</kbd></p><p>贴上Hoohoo写的教程，帮助一句指令实现博文本地预览/上传～</p><p><a href="http://hellohoohoo.com/2021/04/14/%E4%B8%80%E6%9C%88%E4%B8%80%E6%97%A5/2021-04/#more">Hoohoo：写两个脚本帮你一键实现博客本地预览和上传</a></p><hr><p>以后有什么再添加进来～</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>便利生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用oh my zsh &amp; powerlevel10k打造个性化舒适终端</title>
    <link href="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/"/>
    <url>/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工欲善其事，必先利其器。学生时代，一拿到书就先包上漂亮的书皮，准备学习前先拿出一堆自己觉得可能用的笔的往往是学习一般的学生；而将这个习惯延续至现在就演变成为，好好提升技术和钻研科研之前先把各种工具整的好看且舒适。（功能方面，主要实现了代码高亮和代码补全）</p><span id="more"></span><p>先上预览图：</p><p><img src="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/image-20210419234840397.png" alt="terminal效果图"></p><p><img src="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/image-20210419234548494.png" alt="iterm2效果图"></p><p>前情提要：</p><ul><li>terminal本身就可以在偏好设置里修改主题、字体、光标等，我之前选择的是homebrew；</li><li><p>默认可以科学上网；</p></li><li><p>下面的所有操作首先先默认已经安装好了git；</p></li><li>iterm2可以安装也可以不安装，下面会展开讲。</li></ul><h1 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h1><p>首先需要切换成zsh：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chsh -s <span class="hljs-regexp">/bin/</span>zsh<br></code></pre></td></tr></table></figure><p>当然，以后如果需要的话也可以切换回bash：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chsh -s <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p>安装方式有两种，可以使用curl或wget。</p><ul><li>curl安装方式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><ul><li>wget安装方式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>另外附上<a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh开源地址</a></p><h1 id="安装命令补全插件"><a href="#安装命令补全插件" class="headerlink" title="安装命令补全插件"></a>安装命令补全插件</h1><p>这是oh my zsh的一个插件，执行脚本安装。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/.oh-my-zsh/</span>custom<span class="hljs-regexp">/plugins/</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>这时我们再次打开zshrc文件进行编辑。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">vi ~<span class="hljs-string">/.zshrc</span><br></code></pre></td></tr></table></figure><p>找到plugins，此时plugins中应该已经有了git，我们需要把代码补全zsh-autosuggestions也加上：</p><p><img src="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/image-20210420192318838.png" alt="image-20210420192318838"></p><p>加好后执行命令使修改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>另外附上<a href="[https://github.com/sirius1024...](https://github.com/sirius1024/iterm2-with-oh-my-zsh">代码补全插件的开源地址</a>)</p><h1 id="安装代码高亮插件"><a href="#安装代码高亮插件" class="headerlink" title="安装代码高亮插件"></a>安装代码高亮插件</h1><p><del>我们的口令是：代码可以不写，高亮得先整好！</del></p><p>和上面代码补全插件一样的安装方式，执行脚本安装，而后打开zshrc文件进行编辑。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/.oh-my-zsh/</span>custom<span class="hljs-regexp">/plugins/</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions<br>vi ~/.zshrc<br></code></pre></td></tr></table></figure><p>找到plugins，此时plugins中应该已经有了git，我们需要把代码高亮zsh-syntax-hignlighting也加上。</p><p><strong>注意：代码高亮插件一定要是在最后一行。</strong></p><p><img src="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/image-20210420193412909.png" alt="image-20210420193412909"></p><h1 id="安装喜欢的主题"><a href="#安装喜欢的主题" class="headerlink" title="安装喜欢的主题"></a>安装喜欢的主题</h1><p>其实完成到这里，已经可以更好地使用terminal了！但是如果想要让你的终端更好看的话，可以安装喜欢的主题和字体～</p><h2 id="安装agnoster主题"><a href="#安装agnoster主题" class="headerlink" title="安装agnoster主题"></a>安装agnoster主题</h2><p>agnoster主题的效果图如下：</p><p><img src="/2021/04/19/%E7%94%A8oh-my-zsh-powerlevel10k%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/image-20210425201457996.png" alt="agnoster主题"></p><p>为了正确显示以上效果，需要安装powerline和power fonts。</p><h3 id="安装powerline"><a href="#安装powerline" class="headerlink" title="安装powerline"></a>安装powerline</h3><blockquote><p>Powerline使用几种特殊的字形来获得箭头效果，并为开发人员提供一些自定义符号。这需要在系统中安装符号字体或修补字体。使用过的应用程序（例如终端仿真器）也必须配置为使用修补字体。</p><p><a href="http://powerline.readthedocs.io/en/latest/installation.html">Powerline官网</a></p></blockquote><p>安装powerline的指令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">pip install powerline-<span class="hljs-built_in">status</span> <span class="hljs-comment">--user</span><br></code></pre></td></tr></table></figure><h3 id="安装Power-Fonts"><a href="#安装Power-Fonts" class="headerlink" title="安装Power Fonts"></a>安装Power Fonts</h3><p>将项目git clone至本地，然后执行源码中的install.sh来安装字体库。</p><p>首先在你习惯的位置新建一个文件夹，如：~/opensource/</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># clone</span><br>git clone https:<span class="hljs-string">//github.com/powerline/fonts.git</span> <span class="hljs-params">--depth=1</span><br><span class="hljs-comment"># install</span><br><span class="hljs-keyword">cd</span> fonts<br><span class="hljs-string">./install.sh</span><br><span class="hljs-comment"># clean-up a bit</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br>rm -rf fonts<br></code></pre></td></tr></table></figure><p>安装好字体库之后，我们来设置terminal的字体，具体的操作是终端 -&gt; 偏好设置 -&gt; 描述文件 -&gt; 文本 -&gt; 字体。找到Meslo LG字体。有L、M、S可选。</p><p>备注：如果是iterm2则为：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后更换字体。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello LXT</title>
    <link href="/2021/04/14/hello-world/"/>
    <url>/2021/04/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>大家好！</p><p>今天是2021年4月14日凌晨。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
